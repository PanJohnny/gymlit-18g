---
import Layout from "../../../layouts/Layout.astro";
import teachers from "../../../../public/teachers.json";
import BSearchBundle from "../../../components/BSearchBundle.astro";
import LoginInfo from "../../../components/LoginInfo.astro";

const auth = Astro.cookies.get("auth").value;
if (auth != import.meta.env.SECRET) {
    return Astro.redirect("/login");
}

let teacher = Astro.url.searchParams.get("teacher") ?? "";
let clazz = Astro.url.searchParams.get("class") ?? "";
---

<Layout title="Úprava hlášek" description="Portál editora kroniky">
    <div class="body">
        <p>
            Můžete upravovat vždy jeden ročník, při měnění učitele prosím vždy uložte. Po úpravě prosím klikněte na tlačítko commit.
        </p>
        <div class="bsearch">
            <input
                type="search"
                name="teacher"
                id="teach"
                placeholder="Učitel"
                value={teacher}
            />
            <ul class="hidden">
                {Object.keys(teachers).map((k) => <li>{teachers[k]}</li>)}
            </ul>
        </div>
        <div class="bsearch">
            <input type="search" name="class" id="class" placeholder="Třída" value={clazz}/>
            <ul class="hidden">
                <li>Prima</li>
                <li>Sekunda</li>
                <li>Tercie</li>
                <li>Kvarta</li>
                <li>Kvinta</li>
                <li>Sexta</li>
                <li>Septima</li>
                <li>Oktáva</li>
            </ul>
        </div>

        <input type="button" id="submitAll" value="Načíst" />
        <div id="results">Zde se zobrazí výsledky...</div>
        <div id="resControls">
            <input
                type="button"
                id="addField"
                value="+"
                title="Přidá další hlášku"
                style="background-color: green;"
            />
            <input
                type="button"
                id="saveLocal"
                value="Uložit do prohlížeče"
                title="Uloží úpravy do prohlížeče, můžete pak pokračovat v úpravách u jiných učitelů"
                style="background-color: orange;"
            />
            <input
                    type="button"
                    id="commit"
                    value="Commit"
                    title="Odešle úpravy"
                    style="background-color: greenyellow;"
            />
        </div>
        <LoginInfo/>
    </div>
</Layout>

<BSearchBundle />

<!-- NORMAL WORKING -->
<style>
    input[type="button"] {
        outline: none;
        background-color: greenyellow;
        font-size: 1.2em;
        padding: 0.4em;
        border: 1px solid black;
        border-radius: 15px;
        margin-bottom: 0.5em;
    }

    input[type="button"]:hover {
        outline: 1px solid black;
    }

    input[type="button"]:active {
        filter: grayscale(0.5);
    }

    #results {
        display: flex;
        flex-direction: column;
        margin-bottom: 1em;
        margin-top: 1em;
    }
</style>

<!-- TEXT AREA NEEDS SOME THINGS... -->
<style is:global>
    .nc {
        border-color: green;
        outline-color: green;
    }

    textarea {
        display: block;
        margin-bottom: 1em;
        border-width: 2px;
        border-radius: 15px;
        padding: 1em;
        font-family: system-ui, sans-serif;
        font-weight: 500;
    }
</style>

<script>
    function addField() {
        const results = document.querySelector("#results");
        if (!results) {
            window.alert(
                "Nemůžu nikam přidat hlášku břídile! Zkus refreshovat stránku..."
            );
            return;
        }

        const area = document.createElement("textarea");
        area.classList.add("nc");
        area.setAttribute("placeholder", "Nová hláška");
        results.appendChild(area);
    }

    function saveLocal() {
        const results = document.querySelector("#results");
        if (!results || results.children.length == 0) {
            window.alert("Nemůžu uložit hlášky břídile, žádný nejsou!");
            return;
        }

        let phrases: string[] = [];

        results.querySelectorAll("textarea").forEach((child) => {
            if (child.value.trim().length > 0)
                phrases.push(child.value);
        });

        // get saved data
        const clazz: HTMLInputElement | null = document.querySelector("#class");
        const teach: HTMLInputElement | null = document.querySelector("#teach");

        const key = getKeyByValue(teachers, teach?.value.trim());
        if (!key) {
            window.alert("Chyba v načítání hlášek, klíč učitele nenalezen");
            console.error(teachers);
            return;
        }

        // Index of clazz element
        // Start counting from 1
        let i = 1;
        let clazzIndex = -1;
        clazz?.parentElement
            ?.querySelector("ul")
            ?.querySelectorAll("li")
            .forEach((c) => {
                if (c.innerText.toLowerCase() == clazz.value.toLowerCase())
                    clazzIndex = i;

                i++;
            });

        // Check clazz index
        if (clazzIndex < 0) {
            window.alert("Chyba v ukládání hlášek, index třídy mimo dosah");
            return;
        }

        let saved = getSavedData(clazzIndex);

        saved[key] = phrases;

        saveData(clazzIndex, saved);
    }

    async function commit() {
        if(!confirm("Opravdu si přejete uložit a odeslat změny?")) {
            alert("Můžete pokračovat v úpravách... :)")
            return;
        }
        saveLocal();

        const data = await generateJson();
        const msg = prompt("Zadejte krátkou smysluplnou zprávu popisující změny (dobrovolné ale doporučené)");

        if (msg && msg.trim().length > 0)
            data.message = msg;
        await fetch("/api/commit", {
            method: "POST",
            body: JSON.stringify(
                data
            )
        }).then(() => {
            alert("Úspěšně odesláno");
        }, () => {
            alert("Chyba :(");
        })
    }

    async function generateJson() {
        const clazz: HTMLInputElement | null = document.querySelector("#class");

        // Index of clazz element
        // Start counting from 1
        let i = 1;
        let clazzIndex = -1;
        clazz?.parentElement
            ?.querySelector("ul")
            ?.querySelectorAll("li")
            .forEach((c) => {
                if (c.innerText.toLowerCase() == clazz.value.toLowerCase())
                    clazzIndex = i;

                i++;
            });

        // Check clazz index
        if (clazzIndex < 0) {
            window.alert("Chyba v generování JSONu, index třídy mimo dosah");
            return;
        }

        // json
        const generated = getSavedData(clazzIndex);

        let data = await fetch("https://gymlit-18g.vercel.app/catchphrases/" + clazzIndex + ".json").then(b => b.json(), e => alert("Chyba při generování obsahu, zkontrolujte přístup k internetu"));

        Object.keys(generated).forEach((k) => {
            data[k] = generated[k];
        });

        // Reset
        saveData(clazzIndex, {});

        return {raw: JSON.stringify(data, null, "\t"), clazz: clazzIndex, message: `Aktualizovány hlášky pro ${clazzIndex}. G`};
    }   

    function getSavedData(year: number) {
        let sItem: string = localStorage.getItem("saved") + "";

        if (!sItem || !sItem.startsWith("{") || !sItem.endsWith("}")) {
            localStorage.setItem(
                "saved",
                JSON.stringify({
                    "1": {},
                    "2": {},
                    "3": {},
                    "4": {},
                    "5": {},
                    "6": {},
                    "7": {},
                    "8": {},
                })
            );

            sItem = localStorage.getItem("saved") + "";
        }

        let json = JSON.parse(sItem);

        try {
            return json[year];
        } catch (err) {
            alert("Chyba se systémem! Nahlašte: " + err);
        }
    }

    function saveData(year: number, data: any) {
        // This method is not as safe

        // Parse the JSON
        const str = localStorage.getItem("saved");
        if (!str) {
            window.alert("Něco se fakt hodně pokazilo, nepodařilo se uložit!");
            return;
        }
        const saved = JSON.parse(str);
        saved[year] = data;

        localStorage.setItem("saved", JSON.stringify(saved));

        const results:HTMLDivElement | null = document.querySelector("#results");
        if (results)
            results.innerText = "Úspěšně uloženo!";
    }

    document.querySelector("#addField")?.addEventListener("click", addField);
    document.querySelector("#saveLocal")?.addEventListener("click", saveLocal);
    document.querySelector("#commit")?.addEventListener("click", commit);

    // Top level await
    let teachers = await fetch("/teachers.json").then((r) => r.json());

    document
        .querySelector("#submitAll")
        ?.addEventListener("click", async (e) => {
            const clazz: HTMLInputElement | null =
                document.querySelector("#class");
            const teach: HTMLInputElement | null =
                document.querySelector("#teach");

            if (clazz && teach && teachers) {
                const key = getKeyByValue(teachers, teach.value.trim());
                if (!key) {
                    window.alert(
                        "Chyba v načítání hlášek, klíč učitele nenalezen"
                    );
                    console.error(teachers);
                    return;
                }

                // Index of clazz element
                // Start counting from 1
                let i = 1;
                let clazzIndex = -1;
                clazz.parentElement
                    ?.querySelector("ul")
                    ?.querySelectorAll("li")
                    .forEach((c) => {
                        if (
                            c.innerText.toLowerCase() ==
                            clazz.value.toLowerCase()
                        )
                            clazzIndex = i;

                        i++;
                    });

                // Check clazz index
                if (clazzIndex < 0) {
                    window.alert(
                        "Chyba v načítání hlášek, index třídy mimo dosah"
                    );
                    return;
                }

                const phrases = await fetch(
                    "https://gymlit-18g.vercel.app/catchphrases/" + clazzIndex + ".json"
                ).then((b) => b.json());

                const specific = phrases[key];
                if (!specific) {
                    window.alert("Učitel nemá pro tento rok žádné hlášky");
                }
                console.log(specific);
                const results = document.querySelector("#results");
                if (!results) {
                    window.alert(
                        "Nemůžu nikam outputovat výsledky ty břídile!"
                    );
                    return;
                }
                results.innerHTML = "";
                specific.forEach((a) => {
                    const area = document.createElement("textarea");
                    area.innerText = a;
                    results.appendChild(area);
                });
            } else {
                window.alert("Chyba při zpracování požadavku, problém s HTML.");
            }
        });

    function getKeyByValue(object, value) {
        return Object.keys(object).find((key) => object[key] === value);
    }
</script>
