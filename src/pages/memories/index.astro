---
import Memories from "../../layouts/Memories.astro";
import Memory from "../../components/Memory.astro";
import teachers from "../../../public/teachers.json";

let phrases = [];
let events = [];
for (let i = 1; i <= 8; i++) {
    const json = await fetch(
        Astro.url.protocol +
        "//" +
        Astro.url.host +
        "/catchphrases/" +
        i +
        ".json"
    ).then((response) => response.json());
    phrases.push(json);
    const temp = await fetch(
        Astro.url.protocol + "//" + Astro.url.host + "/events/" + i
    ).then((b) => b.text());
    events.push(temp.split(/<body[^>]*>/)[1].split("</body>")[0]);
}
---
<Memories title="Vzpom√≠nky" description="Udƒõlejte si v√Ωlet do minulosti.">
    <header>
        <h1>Vzpom√≠nky</h1>
        <a href="javascript:void(0)" id="print-button">Tisk/export</a>
        <a href="/kronika">Hlavn√≠ strana</a>
    </header>
    <main>
        <div class="print-only-page">
            <h1 style="margin-bottom: 0">V√Ωpis z kroniky</h1>
            <h2 style="margin-top: 0">2018-2025 G</h2>
            <h3>Filip Sova a spol.</h3>
            <div>
                <p id="created-for">
                </p>
            </div>
        </div>
        <div class="print-only-page" id="preamble">
            <div>
                <p>V ruce dr≈æ√≠te v√Ωpis z na≈°√≠ kroniky. Udƒõlejte si cestu o 8 let zp√°tky a zasmƒõjte se s n√°mi.</p>
                <p style="text-align: right">Va≈°i kronik√°≈ôi</p>
                <p style="text-align: right; margin-top: 10px">Filip, Honza, ≈†nek</p>
            </div>
        </div>
        {phrases.map((p, i) => (
                <Memory title={i + 1 + ". G"} events={events[i]} phrases={p}/>
        ))}
        <div class="print-only-page">

        </div>
    </main>

    <dialog id="print-dialog">
        <form method="dialog">
            <h2>Mo≈ænosti pro tisk/export</h2>

            <label>
                <input type="checkbox" id="include-events" checked>
                Zahrnout ud√°losti
            </label>

            <!-- section for picking one teacher to include their quotes only, enabled with checkbox -->
            <label>
                <input type="checkbox" id="filter-teacher" autocomplete="off">
                Vytvo≈ôit v√Ωpis pro uƒçitele
            </label>

            <label hidden id="teacher-select-container">Uƒçitel: <select id="teacher-select">
                {Object.entries(teachers).map(([key, name]) => (
                        <option value={key}>{name}</option>
                ))}
            </select>
            </label>

            <label>
                Osobn√≠ vƒõnov√°n√≠:
                <textarea rows="1" cols="30" id="created-for-input" placeholder="Vƒõnov√°n√≠"></textarea>
                (dobrovoln√©)
            </label>

            <input type="submit" value="Hotovo"/>
        </form>
    </dialog>
</Memories>

<style>
    header {
        display: flex;
        justify-content: space-between;
        padding: 10px;
    }

    header h1 {
        font-size: unset;
    }

    main {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        width: 100%;
    }

    @media print {
        header {
            display: none;
        }

        main {
            display: block;
        }

        .print-only-page {
            display: flex;
        }
    }

    @media screen and (max-width: 768px) {
        main {
            display: block;
        }
    }

    dialog {
        border: none;
        border-radius: 12px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        padding: 20px;
        width: 300px;
    }

    dialog::backdrop {
        background: rgba(0, 0, 0, 0.5);
    }

    dialog form {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    #created-for {
        font-style: italic;
        margin-top: 20px;
    }
</style>

<style is:global>
    .print-only-page {
        width: 210mm;
        height: 297mm;
        display: none;
        flex-direction: column;
        padding: 3mm;
        border: 1px solid black;
        page-break-after: right;
        align-items: center;
        justify-content: center;
    }

    .teacher-results {
        background-color: #f8f8f8;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .teacher-stats {
        width: 90%;
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
        background-color: white;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    }

    .teacher-stats h2 {
        text-align: center;
        margin-bottom: 30px;
        color: #333;
        border-bottom: 2px solid #f0f0f0;
        padding-bottom: 10px;
    }

    .teacher-profile {
        display: flex;
        align-items: center;
        margin-bottom: 40px;
    }

    .teacher-avatar {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        background-color: #4a86e8;
        color: white;
        font-size: 36px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 20px;
    }

    .teacher-info {
        flex: 1;
    }

    .teacher-info h3 {
        font-size: 28px;
        margin: 0 0 10px 0;
    }

    .position {
        font-size: 18px;
        color: #666;
        margin: 5px 0;
    }

    .count, .percentage {
        font-size: 16px;
        margin: 5px 0;
    }

    .ranking {
        margin-top: 40px;
    }

    .ranking h4 {
        margin-bottom: 15px;
        color: #444;
    }

    .ranking-chart {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .ranking-item {
        display: flex;
        align-items: center;
        background-color: #f5f5f5;
        padding: 10px;
        border-radius: 6px;
        transition: opacity 0.3s;
    }

    .ranking-item .position {
        width: 30px;
        font-weight: bold;
        color: #555;
    }

    .ranking-item .name {
        width: 150px;
        font-weight: 500;
    }

    .ranking-item .bar {
        flex: 1;
        height: 12px;
        background-color: #4a86e8;
        border-radius: 6px;
        margin: 0 15px;
    }

    .ranking-item .count {
        font-weight: 500;
        min-width: 40px;
        text-align: right;
    }

    @media print {
        .teacher-results {
            display: flex;
            background-color: white !important;
        }

        .teacher-stats {
            box-shadow: none;
        }

        .print-only-page {
            display: flex;
        }
    }
</style>

<script>
    const printDialog = document.querySelector("#print-dialog") as HTMLDialogElement;
    const filterTeacherCheckbox = document.querySelector("#filter-teacher") as HTMLInputElement;
    const teacherSelect = document.querySelector("#teacher-select") as HTMLSelectElement;

    document.querySelector("#print-button").addEventListener("click", () => {
        printDialog.showModal();
    });

    printDialog.addEventListener("submit", async (e) => {
        e.preventDefault();
        const includeEvents = (document.querySelector("#include-events") as HTMLInputElement).checked;
        document.querySelectorAll(".events").forEach(el => {
            (el as HTMLElement).style.display = includeEvents ? "" : "none";
        });
        if (filterTeacherCheckbox.checked) {
            const teacher = teacherSelect.value;
            const teacherName = teacherSelect.options[teacherSelect.selectedIndex].text;

            document.querySelectorAll(".phrase").forEach(el => {
                if (el.getAttribute("data-said-by") === teacher) {
                    (el as HTMLElement).style.display = ""; // remove the name
                    el.querySelector("h4").style.display = "none";
                } else {
                    (el as HTMLElement).style.display = "none";
                }
            });

            // also remove the years where there are no phrases visible
            document.querySelectorAll(".memory").forEach(memory => {
                const visiblePhrases = memory.querySelectorAll(".phrase:not([style*='display: none'])");
                if (visiblePhrases.length === 0) {
                    (memory as HTMLElement).style.display = "none";
                } else {
                    (memory as HTMLElement).style.display = "";
                }
            });

            // Z√≠skat data o uƒçitel√≠ch z API
            const statsResponse = await fetch("/api/analytics/teachers");
            const stats = await statsResponse.json();

            const teacherStats = stats.byTeacher.find(t => t.id === teacher);
            const teacherIndex = teacherStats.truePosition;
            // Naj√≠t sousedn√≠ uƒçitele v ≈æeb≈ô√≠ƒçku (max 3)
            const neighborTeachers = [];
            const startIndex = Math.max(0, teacherIndex - 3);
            const endIndex = Math.min(stats.byTeacher.length - 1, teacherIndex + 3);

            for (let i = startIndex; i <= endIndex; i++) {
                neighborTeachers.push({
                    ...stats.byTeacher[i],
                    distance: Math.abs(i - teacherIndex)
                });
            }


            // Vytvo≈ôit str√°nku s v√Ωsledky
            const preamble = document.querySelector("#preamble");
            const resultsPage = document.createElement("div");
            resultsPage.className = "print-only-page teacher-results";

            // Vytvo≈ôit medaili podle pozice
            let medal = "";
            if (teacherIndex === 1) {
                medal = "ü•á";
            } else if (teacherIndex === 2) {
                medal = "ü•à";
            } else if (teacherIndex === 3) {
                medal = "ü•â";
            } else if (teacherIndex === 4) {
                medal = "üèÖ";
            } else if (teacherIndex <= 10) {
                medal = "üéñÔ∏è";
            } else {
                medal = "üìú";
            }

            let percentage = ((teacherStats.count / stats.totalCatchphrases) * 100).toFixed(2);

            resultsPage.innerHTML = `
            <div class="teacher-stats">
                <h2>Va≈°e um√≠stƒõn√≠ v ≈æeb≈ô√≠ƒçku hl√°≈°ek</h2>
                <div class="teacher-profile">
                    <div class="teacher-avatar">${medal}</div>
                    <div class="teacher-info">
                        <h3>${teacherName}<h3>
                        <p class="position">${teacherIndex}. m√≠sto v ≈æeb≈ô√≠ƒçku</p>
                        <p class="count">Celkem hl√°≈°ek: <strong>${teacherStats.count}</strong></p>
                        <p class="percentage">To je <strong>${percentage} %</strong> ze v≈°ech hl√°≈°ek</p>
                    </div>
                </div>
                
                <div class="ranking">
                    <h4>Porovn√°n√≠ s ostatn√≠mi</h4>
                    <div class="ranking-chart">
                        ${neighborTeachers.map(t => `
                            <div class="ranking-item" style="opacity: ${1 - (t.distance * 0.2)}">
                                <span class="position">${t.truePosition}.</span>
                                <span class="name">${t.name}</span>
                                <span class="bar" style="width: ${(t.count / stats.byTeacher[0].count) * 100}%"></span>
                                <span class="count">${t.count}</span>
                            </div>
                        `).join('')}
                    </div>
                </div>
            </div>
        `;

            // Vlo≈æit str√°nku za preamble
            preamble.after(resultsPage);
        } else {
            document.querySelectorAll(".phrase").forEach(el => {
                (el as HTMLElement).style.display = "";
            });
        }

        const createdForInput = document.querySelector("#created-for-input") as HTMLTextAreaElement;

        const createdFor = createdForInput.value.trim();
        const createdForP = document.querySelector("#created-for") as HTMLParagraphElement;
        if (createdFor.length > 0) {
            createdForP.textContent = "Vƒõnov√°no " + createdFor;
        }

        printDialog.close();
        window.print();

        document.querySelectorAll(".events").forEach(el => {
            (el as HTMLElement).style.display = "";
        });

        document.querySelectorAll(".phrase").forEach(el => {
            (el as HTMLElement).style.display = "";
            el.querySelector("h4").style.display = "";
        });

        document.querySelectorAll(".memory").forEach(memory => {
            (memory as HTMLElement).style.display = "";
        });

        // Odstranit str√°nku s v√Ωsledky uƒçitele po tisku
        const resultsPage = document.querySelector(".teacher-results");
        if (resultsPage) {
            resultsPage.remove();
        }

        createdForP.textContent = "";
    })

    filterTeacherCheckbox.addEventListener("change", () => {
        teacherSelect.parentElement.hidden = !filterTeacherCheckbox.checked;
    });
</script>